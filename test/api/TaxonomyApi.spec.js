/**
 * podravka.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Podravkaio);
  }
}(this, function(expect, Podravkaio) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Podravkaio.TaxonomyApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaxonomyApi', function() {
    describe('createContentTaxon', function() {
      it('should call createContentTaxon successfully', function(done) {
        //uncomment below and update the code to test createContentTaxon
        //instance.createContentTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTaxon', function() {
      it('should call createTaxon successfully', function(done) {
        //uncomment below and update the code to test createTaxon
        //instance.createTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTaxonBag', function() {
      it('should call createTaxonBag successfully', function(done) {
        //uncomment below and update the code to test createTaxonBag
        //instance.createTaxonBag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTaxonomy', function() {
      it('should call createTaxonomy successfully', function(done) {
        //uncomment below and update the code to test createTaxonomy
        //instance.createTaxonomy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContentTaxon', function() {
      it('should call deleteContentTaxon successfully', function(done) {
        //uncomment below and update the code to test deleteContentTaxon
        //instance.deleteContentTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTaxon', function() {
      it('should call deleteTaxon successfully', function(done) {
        //uncomment below and update the code to test deleteTaxon
        //instance.deleteTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTaxonBag', function() {
      it('should call deleteTaxonBag successfully', function(done) {
        //uncomment below and update the code to test deleteTaxonBag
        //instance.deleteTaxonBag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTaxonomy', function() {
      it('should call deleteTaxonomy successfully', function(done) {
        //uncomment below and update the code to test deleteTaxonomy
        //instance.deleteTaxonomy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTaxon', function() {
      it('should call getContentTaxon successfully', function(done) {
        //uncomment below and update the code to test getContentTaxon
        //instance.getContentTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContentTaxonList', function() {
      it('should call getContentTaxonList successfully', function(done) {
        //uncomment below and update the code to test getContentTaxonList
        //instance.getContentTaxonList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaxon', function() {
      it('should call getTaxon successfully', function(done) {
        //uncomment below and update the code to test getTaxon
        //instance.getTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaxonBag', function() {
      it('should call getTaxonBag successfully', function(done) {
        //uncomment below and update the code to test getTaxonBag
        //instance.getTaxonBag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaxonBagList', function() {
      it('should call getTaxonBagList successfully', function(done) {
        //uncomment below and update the code to test getTaxonBagList
        //instance.getTaxonBagList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaxonList', function() {
      it('should call getTaxonList successfully', function(done) {
        //uncomment below and update the code to test getTaxonList
        //instance.getTaxonList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaxonomy', function() {
      it('should call getTaxonomy successfully', function(done) {
        //uncomment below and update the code to test getTaxonomy
        //instance.getTaxonomy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaxonomyList', function() {
      it('should call getTaxonomyList successfully', function(done) {
        //uncomment below and update the code to test getTaxonomyList
        //instance.getTaxonomyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContentTaxon', function() {
      it('should call updateContentTaxon successfully', function(done) {
        //uncomment below and update the code to test updateContentTaxon
        //instance.updateContentTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaxon', function() {
      it('should call updateTaxon successfully', function(done) {
        //uncomment below and update the code to test updateTaxon
        //instance.updateTaxon(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaxonBag', function() {
      it('should call updateTaxonBag successfully', function(done) {
        //uncomment below and update the code to test updateTaxonBag
        //instance.updateTaxonBag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaxonomy', function() {
      it('should call updateTaxonomy successfully', function(done) {
        //uncomment below and update the code to test updateTaxonomy
        //instance.updateTaxonomy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
