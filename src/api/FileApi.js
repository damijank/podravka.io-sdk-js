/**
 * podravka.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FileCreate', 'model/FileCreateRead', 'model/FileList', 'model/FileRead', 'model/FileState', 'model/FileUpdate', 'model/FileUpdateRead'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FileCreate'), require('../model/FileCreateRead'), require('../model/FileList'), require('../model/FileRead'), require('../model/FileState'), require('../model/FileUpdate'), require('../model/FileUpdateRead'));
  } else {
    // Browser globals (root is window)
    if (!root.Podravkaio) {
      root.Podravkaio = {};
    }
    root.Podravkaio.FileApi = factory(root.Podravkaio.ApiClient, root.Podravkaio.FileCreate, root.Podravkaio.FileCreateRead, root.Podravkaio.FileList, root.Podravkaio.FileRead, root.Podravkaio.FileState, root.Podravkaio.FileUpdate, root.Podravkaio.FileUpdateRead);
  }
}(this, function(ApiClient, FileCreate, FileCreateRead, FileList, FileRead, FileState, FileUpdate, FileUpdateRead) {
  'use strict';

  /**
   * File service.
   * @module api/FileApi
   * @version 0.1.0
   */

  /**
   * Constructs a new FileApi. 
   * @alias module:api/FileApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFile operation.
     * @callback module:api/FileApi~createFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileCreateRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a File resource.
     * @param {module:model/FileCreate} fileCreate The new File resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/FileApi~createFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileCreateRead}
     */
    this.createFile = function(fileCreate, opts, callback) {
      opts = opts || {};
      var postBody = fileCreate;

      // verify the required parameter 'fileCreate' is set
      if (fileCreate === undefined || fileCreate === null) {
        throw new Error("Missing the required parameter 'fileCreate' when calling createFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = FileCreateRead;

      return this.apiClient.callApi(
        '/files', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/FileApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the File resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/FileApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFile = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFile");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/files/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFile operation.
     * @callback module:api/FileApi~getFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a File resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/FileApi~getFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileRead}
     */
    this.getFile = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFile");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = FileRead;

      return this.apiClient.callApi(
        '/files/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileList operation.
     * @callback module:api/FileApi~getFileListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of File resources.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {Number} opts.page The collection page number
     * @param {module:api/FileApi~getFileListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileList>}
     */
    this.getFileList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = [FileList];

      return this.apiClient.callApi(
        '/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileState operation.
     * @callback module:api/FileApi~getFileStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a File resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/FileApi~getFileStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileState}
     */
    this.getFileState = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFileState");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = FileState;

      return this.apiClient.callApi(
        '/files/{id}/state', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setFileState operation.
     * @callback module:api/FileApi~setFileStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the File resource.
     * @param {String} id 
     * @param {String} state 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {String} opts.filename Specifies the filename to be used for the &#39;upload&#39; transition
     * @param {module:api/FileApi~setFileStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileState}
     */
    this.setFileState = function(id, state, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setFileState");
      }

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling setFileState");
      }


      var pathParams = {
        'id': id,
        'state': state
      };
      var queryParams = {
        'filename': opts['filename'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = FileState;

      return this.apiClient.callApi(
        '/files/{id}/state/{state}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFile operation.
     * @callback module:api/FileApi~updateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileUpdateRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the File resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/FileUpdate} opts.fileUpdate The updated File resource
     * @param {module:api/FileApi~updateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileUpdateRead}
     */
    this.updateFile = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['fileUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFile");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = FileUpdateRead;

      return this.apiClient.callApi(
        '/files/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
