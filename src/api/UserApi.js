/**
 * podravka.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Metrics', 'model/UserGroup', 'model/UserGroupCreate', 'model/UserGroupList', 'model/UserGroupRead', 'model/UserGroupUpdate', 'model/UserList', 'model/UserRead', 'model/UserUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Metrics'), require('../model/UserGroup'), require('../model/UserGroupCreate'), require('../model/UserGroupList'), require('../model/UserGroupRead'), require('../model/UserGroupUpdate'), require('../model/UserList'), require('../model/UserRead'), require('../model/UserUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.Podravkaio) {
      root.Podravkaio = {};
    }
    root.Podravkaio.UserApi = factory(root.Podravkaio.ApiClient, root.Podravkaio.Metrics, root.Podravkaio.UserGroup, root.Podravkaio.UserGroupCreate, root.Podravkaio.UserGroupList, root.Podravkaio.UserGroupRead, root.Podravkaio.UserGroupUpdate, root.Podravkaio.UserList, root.Podravkaio.UserRead, root.Podravkaio.UserUpdate);
  }
}(this, function(ApiClient, Metrics, UserGroup, UserGroupCreate, UserGroupList, UserGroupRead, UserGroupUpdate, UserList, UserRead, UserUpdate) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 0.2.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteUserGroupItem operation.
     * @callback module:api/UserApi~deleteUserGroupItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the UserGroup resource.
     * @param {String} id 
     * @param {module:api/UserApi~deleteUserGroupItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUserGroupItem = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserGroupItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a User resource.
     * @param {String} id 
     * @param {module:api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    this.getUser = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserRead;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserCollection operation.
     * @callback module:api/UserApi~getUserCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of User resources.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The collection page number
     * @param {module:api/UserApi~getUserCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserList>}
     */
    this.getUserCollection = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserList];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserGroupCollection operation.
     * @callback module:api/UserApi~getUserGroupCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserGroupList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of UserGroup resources.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The collection page number
     * @param {module:api/UserApi~getUserGroupCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserGroupList>}
     */
    this.getUserGroupCollection = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserGroupList];

      return this.apiClient.callApi(
        '/usergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserGroupItem operation.
     * @callback module:api/UserApi~getUserGroupItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a UserGroup resource.
     * @param {String} id 
     * @param {module:api/UserApi~getUserGroupItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupRead}
     */
    this.getUserGroupItem = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserGroupItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserGroupRead;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserListMetrics operation.
     * @callback module:api/UserApi~getUserListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics of User collection.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/UserApi~getUserListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    this.getUserListMetrics = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metrics;

      return this.apiClient.callApi(
        '/users/metrics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserMetrics operation.
     * @callback module:api/UserApi~getUserMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metrics of User resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/UserApi~getUserMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    this.getUserMetrics = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserMetrics");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Metrics;

      return this.apiClient.callApi(
        '/users/{id}/metrics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the membersAddUserGroupItem operation.
     * @callback module:api/UserApi~membersAddUserGroupItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the UserGroup resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGroup} opts.userGroup The updated UserGroup resource
     * @param {module:api/UserApi~membersAddUserGroupItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.membersAddUserGroupItem = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['userGroup'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling membersAddUserGroupItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroup;

      return this.apiClient.callApi(
        '/usergroups/{id}/members/{userId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the membersRemoveUserGroupItem operation.
     * @callback module:api/UserApi~membersRemoveUserGroupItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the UserGroup resource.
     * @param {String} id 
     * @param {module:api/UserApi~membersRemoveUserGroupItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.membersRemoveUserGroupItem = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling membersRemoveUserGroupItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{id}/members/{userId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postUserGroupCollection operation.
     * @callback module:api/UserApi~postUserGroupCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a UserGroup resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGroupCreate} opts.userGroupCreate The new UserGroup resource
     * @param {module:api/UserApi~postUserGroupCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupRead}
     */
    this.postUserGroupCollection = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['userGroupCreate'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroupRead;

      return this.apiClient.callApi(
        '/usergroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putUser operation.
     * @callback module:api/UserApi~putUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the User resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUpdate} opts.userUpdate The updated User resource
     * @param {module:api/UserApi~putUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    this.putUser = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['userUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserRead;

      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putUserGroupItem operation.
     * @callback module:api/UserApi~putUserGroupItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the UserGroup resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGroupUpdate} opts.userGroupUpdate The updated UserGroup resource
     * @param {module:api/UserApi~putUserGroupItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupRead}
     */
    this.putUserGroupItem = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['userGroupUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putUserGroupItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroupRead;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
