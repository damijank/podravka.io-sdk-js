/**
 * podravka.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ArticleCreate', 'model/ArticleList', 'model/ArticleRead', 'model/ArticleState', 'model/ArticleUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ArticleCreate'), require('../model/ArticleList'), require('../model/ArticleRead'), require('../model/ArticleState'), require('../model/ArticleUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.Podravkaio) {
      root.Podravkaio = {};
    }
    root.Podravkaio.ArticleApi = factory(root.Podravkaio.ApiClient, root.Podravkaio.ArticleCreate, root.Podravkaio.ArticleList, root.Podravkaio.ArticleRead, root.Podravkaio.ArticleState, root.Podravkaio.ArticleUpdate);
  }
}(this, function(ApiClient, ArticleCreate, ArticleList, ArticleRead, ArticleState, ArticleUpdate) {
  'use strict';

  /**
   * Article service.
   * @module api/ArticleApi
   * @version 0.1.0
   */

  /**
   * Constructs a new ArticleApi. 
   * @alias module:api/ArticleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createArticle operation.
     * @callback module:api/ArticleApi~createArticleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Article resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/ArticleCreate} opts.articleCreate The new Article resource
     * @param {module:api/ArticleApi~createArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleRead}
     */
    this.createArticle = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['articleCreate'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = ArticleRead;

      return this.apiClient.callApi(
        '/articles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArticle operation.
     * @callback module:api/ArticleApi~deleteArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Article resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/ArticleApi~deleteArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteArticle = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteArticle");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/articles/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticle operation.
     * @callback module:api/ArticleApi~getArticleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Article resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/ArticleApi~getArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleRead}
     */
    this.getArticle = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticle");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = ArticleRead;

      return this.apiClient.callApi(
        '/articles/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleList operation.
     * @callback module:api/ArticleApi~getArticleListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Article resources.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {Number} opts.page The collection page number
     * @param {module:api/ArticleApi~getArticleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleList>}
     */
    this.getArticleList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = [ArticleList];

      return this.apiClient.callApi(
        '/articles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleState operation.
     * @callback module:api/ArticleApi~getArticleStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Article resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/ArticleApi~getArticleStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleState}
     */
    this.getArticleState = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticleState");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = ArticleState;

      return this.apiClient.callApi(
        '/articles/{id}/state', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setArticleState operation.
     * @callback module:api/ArticleApi~setArticleStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Article resource.
     * @param {String} id 
     * @param {String} state 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/ArticleApi~setArticleStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleState}
     */
    this.setArticleState = function(id, state, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setArticleState");
      }

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling setArticleState");
      }


      var pathParams = {
        'id': id,
        'state': state
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = ArticleState;

      return this.apiClient.callApi(
        '/articles/{id}/state/{state}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArticle operation.
     * @callback module:api/ArticleApi~updateArticleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Article resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/ArticleUpdate} opts.articleUpdate The updated Article resource
     * @param {module:api/ArticleApi~updateArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleRead}
     */
    this.updateArticle = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['articleUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateArticle");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json', 'application/ld+json', 'text/html'];
      var accepts = ['application/json', 'application/ld+json', 'text/html'];
      var returnType = ArticleRead;

      return this.apiClient.callApi(
        '/articles/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
