/**
 * podravka.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ArticleApiState', 'model/ArticleArticleCreate', 'model/ArticleArticleCreateReadCreateReadArticleReadRead', 'model/ArticleArticleListList', 'model/ArticleArticleReadRead', 'model/ArticleArticleUpdate', 'model/ArticleArticleUpdateReadUpdateReadArticleReadRead', 'model/ImageImageReadRead'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ArticleApiState'), require('../model/ArticleArticleCreate'), require('../model/ArticleArticleCreateReadCreateReadArticleReadRead'), require('../model/ArticleArticleListList'), require('../model/ArticleArticleReadRead'), require('../model/ArticleArticleUpdate'), require('../model/ArticleArticleUpdateReadUpdateReadArticleReadRead'), require('../model/ImageImageReadRead'));
  } else {
    // Browser globals (root is window)
    if (!root.Podravkaio) {
      root.Podravkaio = {};
    }
    root.Podravkaio.ArticleApi = factory(root.Podravkaio.ApiClient, root.Podravkaio.ArticleApiState, root.Podravkaio.ArticleArticleCreate, root.Podravkaio.ArticleArticleCreateReadCreateReadArticleReadRead, root.Podravkaio.ArticleArticleListList, root.Podravkaio.ArticleArticleReadRead, root.Podravkaio.ArticleArticleUpdate, root.Podravkaio.ArticleArticleUpdateReadUpdateReadArticleReadRead, root.Podravkaio.ImageImageReadRead);
  }
}(this, function(ApiClient, ArticleApiState, ArticleArticleCreate, ArticleArticleCreateReadCreateReadArticleReadRead, ArticleArticleListList, ArticleArticleReadRead, ArticleArticleUpdate, ArticleArticleUpdateReadUpdateReadArticleReadRead, ImageImageReadRead) {
  'use strict';

  /**
   * Article service.
   * @module api/ArticleApi
   * @version 0.0.2.1
   */

  /**
   * Constructs a new ArticleApi. 
   * @alias module:api/ArticleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiArticlesImagesGetSubresource operation.
     * @callback module:api/ArticleApi~apiArticlesImagesGetSubresourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageImageReadRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Image resources.
     * @param {String} id 
     * @param {module:api/ArticleApi~apiArticlesImagesGetSubresourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageImageReadRead>}
     */
    this.apiArticlesImagesGetSubresource = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiArticlesImagesGetSubresource");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/ld+json', 'application/json', 'text/html'];
      var returnType = [ImageImageReadRead];

      return this.apiClient.callApi(
        '/api/articles/{id}/images', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGetStateArticleItem operation.
     * @callback module:api/ArticleApi~apiGetStateArticleItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleApiState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Article resource.
     * @param {String} id 
     * @param {module:api/ArticleApi~apiGetStateArticleItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleApiState}
     */
    this.apiGetStateArticleItem = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiGetStateArticleItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/ld+json', 'application/json', 'text/html'];
      var returnType = ArticleApiState;

      return this.apiClient.callApi(
        '/api/articles/{id}/state', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSetStateArticleItem operation.
     * @callback module:api/ArticleApi~apiSetStateArticleItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleApiState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Article resource.
     * @param {String} id 
     * @param {String} state 
     * @param {module:api/ArticleApi~apiSetStateArticleItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleApiState}
     */
    this.apiSetStateArticleItem = function(id, state, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSetStateArticleItem");
      }

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling apiSetStateArticleItem");
      }


      var pathParams = {
        'id': id,
        'state': state
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/ld+json', 'application/json', 'text/html'];
      var accepts = ['application/ld+json', 'application/json', 'text/html'];
      var returnType = ArticleApiState;

      return this.apiClient.callApi(
        '/api/articles/{id}/state/{state}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArticleItem operation.
     * @callback module:api/ArticleApi~deleteArticleItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Article resource.
     * @param {String} id 
     * @param {module:api/ArticleApi~deleteArticleItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteArticleItem = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteArticleItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/articles/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleCollection operation.
     * @callback module:api/ArticleApi~getArticleCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleArticleListList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Article resources.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The collection page number
     * @param {module:api/ArticleApi~getArticleCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleArticleListList>}
     */
    this.getArticleCollection = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/ld+json', 'application/json', 'text/html'];
      var returnType = [ArticleArticleListList];

      return this.apiClient.callApi(
        '/api/articles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticleItem operation.
     * @callback module:api/ArticleApi~getArticleItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleArticleReadRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Article resource.
     * @param {String} id 
     * @param {module:api/ArticleApi~getArticleItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleArticleReadRead}
     */
    this.getArticleItem = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArticleItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/ld+json', 'application/json', 'text/html'];
      var returnType = ArticleArticleReadRead;

      return this.apiClient.callApi(
        '/api/articles/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postArticleCollection operation.
     * @callback module:api/ArticleApi~postArticleCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleArticleCreateReadCreateReadArticleReadRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Article resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ArticleArticleCreate} opts.article The new Article resource
     * @param {module:api/ArticleApi~postArticleCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleArticleCreateReadCreateReadArticleReadRead}
     */
    this.postArticleCollection = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['article'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/ld+json', 'application/json', 'text/html'];
      var accepts = ['application/ld+json', 'application/json', 'text/html'];
      var returnType = ArticleArticleCreateReadCreateReadArticleReadRead;

      return this.apiClient.callApi(
        '/api/articles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putArticleItem operation.
     * @callback module:api/ArticleApi~putArticleItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleArticleUpdateReadUpdateReadArticleReadRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Article resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArticleArticleUpdate} opts.article The updated Article resource
     * @param {module:api/ArticleApi~putArticleItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleArticleUpdateReadUpdateReadArticleReadRead}
     */
    this.putArticleItem = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['article'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putArticleItem");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/ld+json', 'application/json', 'text/html'];
      var accepts = ['application/ld+json', 'application/json', 'text/html'];
      var returnType = ArticleArticleUpdateReadUpdateReadArticleReadRead;

      return this.apiClient.callApi(
        '/api/articles/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
