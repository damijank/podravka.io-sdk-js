/**
 * podravka.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageImageCreate from '../model/ImageImageCreate';
import ImageImageCreateReadCreateReadRead from '../model/ImageImageCreateReadCreateReadRead';
import ImageImageListList from '../model/ImageImageListList';
import ImageImageReadRead from '../model/ImageImageReadRead';
import ImageImageUpdate from '../model/ImageImageUpdate';
import ImageImageUpdateReadUpdateReadRead from '../model/ImageImageUpdateReadUpdateReadRead';

/**
* Image service.
* @module api/ImageApi
* @version 0.0.1
*/
export default class ImageApi {

    /**
    * Constructs a new ImageApi. 
    * @alias module:api/ImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteImageItem operation.
     * @callback module:api/ImageApi~deleteImageItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Image resource.
     * @param {String} id 
     * @param {module:api/ImageApi~deleteImageItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteImageItem(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImageItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/images/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageCollection operation.
     * @callback module:api/ImageApi~getImageCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageImageListList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Image resources.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The collection page number
     * @param {module:api/ImageApi~getImageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageImageListList>}
     */
    getImageCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html'];
      let returnType = [ImageImageListList];

      return this.apiClient.callApi(
        '/api/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageItem operation.
     * @callback module:api/ImageApi~getImageItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImageReadRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Image resource.
     * @param {String} id 
     * @param {module:api/ImageApi~getImageItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImageReadRead}
     */
    getImageItem(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html'];
      let returnType = ImageImageReadRead;

      return this.apiClient.callApi(
        '/api/images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postImageCollection operation.
     * @callback module:api/ImageApi~postImageCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImageCreateReadCreateReadRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Image resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImageImageCreate} opts.image The new Image resource
     * @param {module:api/ImageApi~postImageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImageCreateReadCreateReadRead}
     */
    postImageCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['image'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html'];
      let accepts = ['application/ld+json', 'application/json', 'text/html'];
      let returnType = ImageImageCreateReadCreateReadRead;

      return this.apiClient.callApi(
        '/api/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putImageItem operation.
     * @callback module:api/ImageApi~putImageItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImageUpdateReadUpdateReadRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Image resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ImageImageUpdate} opts.image The updated Image resource
     * @param {module:api/ImageApi~putImageItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImageUpdateReadUpdateReadRead}
     */
    putImageItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['image'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putImageItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html'];
      let accepts = ['application/ld+json', 'application/json', 'text/html'];
      let returnType = ImageImageUpdateReadUpdateReadRead;

      return this.apiClient.callApi(
        '/api/images/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
