/**
 * podravka.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentTaxonCreate', 'model/ContentTaxonList', 'model/ContentTaxonRead', 'model/TaxonBagCreate', 'model/TaxonBagList', 'model/TaxonBagRead', 'model/TaxonBagUpdate', 'model/TaxonCreate', 'model/TaxonList', 'model/TaxonRead', 'model/TaxonUpdate', 'model/TaxonomyCreate', 'model/TaxonomyList', 'model/TaxonomyRead', 'model/TaxonomyUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentTaxonCreate'), require('../model/ContentTaxonList'), require('../model/ContentTaxonRead'), require('../model/TaxonBagCreate'), require('../model/TaxonBagList'), require('../model/TaxonBagRead'), require('../model/TaxonBagUpdate'), require('../model/TaxonCreate'), require('../model/TaxonList'), require('../model/TaxonRead'), require('../model/TaxonUpdate'), require('../model/TaxonomyCreate'), require('../model/TaxonomyList'), require('../model/TaxonomyRead'), require('../model/TaxonomyUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.Podravkaio) {
      root.Podravkaio = {};
    }
    root.Podravkaio.TaxonomyApi = factory(root.Podravkaio.ApiClient, root.Podravkaio.ContentTaxonCreate, root.Podravkaio.ContentTaxonList, root.Podravkaio.ContentTaxonRead, root.Podravkaio.TaxonBagCreate, root.Podravkaio.TaxonBagList, root.Podravkaio.TaxonBagRead, root.Podravkaio.TaxonBagUpdate, root.Podravkaio.TaxonCreate, root.Podravkaio.TaxonList, root.Podravkaio.TaxonRead, root.Podravkaio.TaxonUpdate, root.Podravkaio.TaxonomyCreate, root.Podravkaio.TaxonomyList, root.Podravkaio.TaxonomyRead, root.Podravkaio.TaxonomyUpdate);
  }
}(this, function(ApiClient, ContentTaxonCreate, ContentTaxonList, ContentTaxonRead, TaxonBagCreate, TaxonBagList, TaxonBagRead, TaxonBagUpdate, TaxonCreate, TaxonList, TaxonRead, TaxonUpdate, TaxonomyCreate, TaxonomyList, TaxonomyRead, TaxonomyUpdate) {
  'use strict';

  /**
   * Taxonomy service.
   * @module api/TaxonomyApi
   * @version 0.2.0
   */

  /**
   * Constructs a new TaxonomyApi. 
   * @alias module:api/TaxonomyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createContentTaxon operation.
     * @callback module:api/TaxonomyApi~createContentTaxonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentTaxonRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a ContentTaxon resource.
     * @param {String} entity 
     * @param {String} id 
     * @param {String} bag 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/ContentTaxonCreate} opts.contentTaxonCreate The new ContentTaxon resource
     * @param {module:api/TaxonomyApi~createContentTaxonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentTaxonRead}
     */
    this.createContentTaxon = function(entity, id, bag, opts, callback) {
      opts = opts || {};
      var postBody = opts['contentTaxonCreate'];

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling createContentTaxon");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createContentTaxon");
      }

      // verify the required parameter 'bag' is set
      if (bag === undefined || bag === null) {
        throw new Error("Missing the required parameter 'bag' when calling createContentTaxon");
      }


      var pathParams = {
        'entity': entity,
        'id': id,
        'bag': bag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentTaxonRead;

      return this.apiClient.callApi(
        '/{entity}/{id}/taxons/{bag}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTaxon operation.
     * @callback module:api/TaxonomyApi~createTaxonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Taxon resource.
     * @param {String} taxonomy 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/TaxonCreate} opts.taxonCreate The new Taxon resource
     * @param {module:api/TaxonomyApi~createTaxonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonRead}
     */
    this.createTaxon = function(taxonomy, opts, callback) {
      opts = opts || {};
      var postBody = opts['taxonCreate'];

      // verify the required parameter 'taxonomy' is set
      if (taxonomy === undefined || taxonomy === null) {
        throw new Error("Missing the required parameter 'taxonomy' when calling createTaxon");
      }


      var pathParams = {
        'taxonomy': taxonomy
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxonRead;

      return this.apiClient.callApi(
        '/taxons/{taxonomy}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTaxonBag operation.
     * @callback module:api/TaxonomyApi~createTaxonBagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonBagRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a TaxonBag resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/TaxonBagCreate} opts.taxonBagCreate The new TaxonBag resource
     * @param {module:api/TaxonomyApi~createTaxonBagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonBagRead}
     */
    this.createTaxonBag = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['taxonBagCreate'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxonBagRead;

      return this.apiClient.callApi(
        '/taxons-bags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTaxonomy operation.
     * @callback module:api/TaxonomyApi~createTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonomyRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Taxonomy resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/TaxonomyCreate} opts.taxonomyCreate The new Taxonomy resource
     * @param {module:api/TaxonomyApi~createTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonomyRead}
     */
    this.createTaxonomy = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['taxonomyCreate'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxonomyRead;

      return this.apiClient.callApi(
        '/taxonomies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContentTaxon operation.
     * @callback module:api/TaxonomyApi~deleteContentTaxonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the ContentTaxon resource.
     * @param {String} id 
     * @param {String} entity 
     * @param {String} bag 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~deleteContentTaxonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContentTaxon = function(id, entity, bag, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteContentTaxon");
      }

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling deleteContentTaxon");
      }

      // verify the required parameter 'bag' is set
      if (bag === undefined || bag === null) {
        throw new Error("Missing the required parameter 'bag' when calling deleteContentTaxon");
      }


      var pathParams = {
        'id': id,
        'entity': entity,
        'bag': bag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/{entity}/{id}/taxons/{bag}/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxon operation.
     * @callback module:api/TaxonomyApi~deleteTaxonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Taxon resource.
     * @param {String} taxonomy 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~deleteTaxonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTaxon = function(taxonomy, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taxonomy' is set
      if (taxonomy === undefined || taxonomy === null) {
        throw new Error("Missing the required parameter 'taxonomy' when calling deleteTaxon");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTaxon");
      }


      var pathParams = {
        'taxonomy': taxonomy,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/taxons/{taxonomy}/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxonBag operation.
     * @callback module:api/TaxonomyApi~deleteTaxonBagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the TaxonBag resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~deleteTaxonBagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTaxonBag = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTaxonBag");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/taxons-bags/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxonomy operation.
     * @callback module:api/TaxonomyApi~deleteTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Taxonomy resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~deleteTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTaxonomy = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTaxonomy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/taxonomies/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTaxon operation.
     * @callback module:api/TaxonomyApi~getContentTaxonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentTaxonRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a ContentTaxon resource.
     * @param {String} id 
     * @param {String} entity 
     * @param {String} bag 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~getContentTaxonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentTaxonRead}
     */
    this.getContentTaxon = function(id, entity, bag, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentTaxon");
      }

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling getContentTaxon");
      }

      // verify the required parameter 'bag' is set
      if (bag === undefined || bag === null) {
        throw new Error("Missing the required parameter 'bag' when calling getContentTaxon");
      }


      var pathParams = {
        'id': id,
        'entity': entity,
        'bag': bag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ContentTaxonRead;

      return this.apiClient.callApi(
        '/{entity}/{id}/taxons/{bag}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentTaxonList operation.
     * @callback module:api/TaxonomyApi~getContentTaxonListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContentTaxonList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of ContentTaxon resources.
     * @param {String} entity 
     * @param {String} id 
     * @param {String} bag 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {Number} opts.page The collection page number
     * @param {module:api/TaxonomyApi~getContentTaxonListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContentTaxonList>}
     */
    this.getContentTaxonList = function(entity, id, bag, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling getContentTaxonList");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentTaxonList");
      }

      // verify the required parameter 'bag' is set
      if (bag === undefined || bag === null) {
        throw new Error("Missing the required parameter 'bag' when calling getContentTaxonList");
      }


      var pathParams = {
        'entity': entity,
        'id': id,
        'bag': bag
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ContentTaxonList];

      return this.apiClient.callApi(
        '/{entity}/{id}/taxons/{bag}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxon operation.
     * @callback module:api/TaxonomyApi~getTaxonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Taxon resource.
     * @param {String} taxonomy 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~getTaxonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonRead}
     */
    this.getTaxon = function(taxonomy, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taxonomy' is set
      if (taxonomy === undefined || taxonomy === null) {
        throw new Error("Missing the required parameter 'taxonomy' when calling getTaxon");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaxon");
      }


      var pathParams = {
        'taxonomy': taxonomy,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TaxonRead;

      return this.apiClient.callApi(
        '/taxons/{taxonomy}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxonBag operation.
     * @callback module:api/TaxonomyApi~getTaxonBagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonBagRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a TaxonBag resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~getTaxonBagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonBagRead}
     */
    this.getTaxonBag = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaxonBag");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TaxonBagRead;

      return this.apiClient.callApi(
        '/taxons-bags/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxonBagList operation.
     * @callback module:api/TaxonomyApi~getTaxonBagListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxonBagList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of TaxonBag resources.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {Number} opts.page The collection page number
     * @param {module:api/TaxonomyApi~getTaxonBagListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxonBagList>}
     */
    this.getTaxonBagList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TaxonBagList];

      return this.apiClient.callApi(
        '/taxons-bags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxonList operation.
     * @callback module:api/TaxonomyApi~getTaxonListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxonList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Taxon resources.
     * @param {String} taxonomy 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {Number} opts.page The collection page number
     * @param {module:api/TaxonomyApi~getTaxonListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxonList>}
     */
    this.getTaxonList = function(taxonomy, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taxonomy' is set
      if (taxonomy === undefined || taxonomy === null) {
        throw new Error("Missing the required parameter 'taxonomy' when calling getTaxonList");
      }


      var pathParams = {
        'taxonomy': taxonomy
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TaxonList];

      return this.apiClient.callApi(
        '/taxons/{taxonomy}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxonomy operation.
     * @callback module:api/TaxonomyApi~getTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonomyRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Taxonomy resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:api/TaxonomyApi~getTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonomyRead}
     */
    this.getTaxonomy = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaxonomy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TaxonomyRead;

      return this.apiClient.callApi(
        '/taxonomies/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxonomyList operation.
     * @callback module:api/TaxonomyApi~getTaxonomyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxonomyList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Taxonomy resources.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {Number} opts.page The collection page number
     * @param {module:api/TaxonomyApi~getTaxonomyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxonomyList>}
     */
    this.getTaxonomyList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TaxonomyList];

      return this.apiClient.callApi(
        '/taxonomies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxon operation.
     * @callback module:api/TaxonomyApi~updateTaxonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Taxon resource.
     * @param {String} taxonomy 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/TaxonUpdate} opts.taxonUpdate The updated Taxon resource
     * @param {module:api/TaxonomyApi~updateTaxonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonRead}
     */
    this.updateTaxon = function(taxonomy, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['taxonUpdate'];

      // verify the required parameter 'taxonomy' is set
      if (taxonomy === undefined || taxonomy === null) {
        throw new Error("Missing the required parameter 'taxonomy' when calling updateTaxon");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTaxon");
      }


      var pathParams = {
        'taxonomy': taxonomy,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxonRead;

      return this.apiClient.callApi(
        '/taxons/{taxonomy}/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxonBag operation.
     * @callback module:api/TaxonomyApi~updateTaxonBagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonBagRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the TaxonBag resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/TaxonBagUpdate} opts.taxonBagUpdate The updated TaxonBag resource
     * @param {module:api/TaxonomyApi~updateTaxonBagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonBagRead}
     */
    this.updateTaxonBag = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['taxonBagUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTaxonBag");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxonBagRead;

      return this.apiClient.callApi(
        '/taxons-bags/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxonomy operation.
     * @callback module:api/TaxonomyApi~updateTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxonomyRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Taxonomy resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Locale code
     * @param {module:model/TaxonomyUpdate} opts.taxonomyUpdate The updated Taxonomy resource
     * @param {module:api/TaxonomyApi~updateTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxonomyRead}
     */
    this.updateTaxonomy = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['taxonomyUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTaxonomy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxonomyRead;

      return this.apiClient.callApi(
        '/taxonomies/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
